// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/24/2021 11:36:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          jogo_da_velha
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module jogo_da_velha_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg J1_APERTOU;
reg [3:0] J1_SEL;
reg J2_APERTOU;
reg [3:0] J2_SEL;
reg RESET;
// wires                                               
wire EMPATE;
wire LOG_controle1CargaS;
wire LOG_controle2CargaS;
wire [3:0] LOG_selmem_sel;
wire LOG_selmemCargaS;
wire LOG_vsvenceuCargaE;
wire PARTIDA_ATIVA;
wire [6:0] QUADRO0;
wire [6:0] QUADRO1;
wire [6:0] QUADRO2;
wire [6:0] QUADRO3;
wire [6:0] QUADRO4;
wire [6:0] QUADRO5;
wire [6:0] QUADRO6;
wire [6:0] QUADRO7;
wire [6:0] QUADRO8;
wire VENCEU;
wire VEZ_DO_J1;
wire VEZ_DO_J2;

// assign statements (if any)                          
jogo_da_velha i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.EMPATE(EMPATE),
	.J1_APERTOU(J1_APERTOU),
	.J1_SEL(J1_SEL),
	.J2_APERTOU(J2_APERTOU),
	.J2_SEL(J2_SEL),
	.LOG_controle1CargaS(LOG_controle1CargaS),
	.LOG_controle2CargaS(LOG_controle2CargaS),
	.LOG_selmem_sel(LOG_selmem_sel),
	.LOG_selmemCargaS(LOG_selmemCargaS),
	.LOG_vsvenceuCargaE(LOG_vsvenceuCargaE),
	.PARTIDA_ATIVA(PARTIDA_ATIVA),
	.QUADRO0(QUADRO0),
	.QUADRO1(QUADRO1),
	.QUADRO2(QUADRO2),
	.QUADRO3(QUADRO3),
	.QUADRO4(QUADRO4),
	.QUADRO5(QUADRO5),
	.QUADRO6(QUADRO6),
	.QUADRO7(QUADRO7),
	.QUADRO8(QUADRO8),
	.RESET(RESET),
	.VENCEU(VENCEU),
	.VEZ_DO_J1(VEZ_DO_J1),
	.VEZ_DO_J2(VEZ_DO_J2)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// RESET
initial
begin
	RESET = 1'b0;
	RESET = #70000 1'b1;
	RESET = #100000 1'b0;
end 

// J1_APERTOU
initial
begin
	J1_APERTOU = 1'b0;
	J1_APERTOU = #490000 1'b1;
	J1_APERTOU = #160000 1'b0;
end 
// J1_SEL[ 3 ]
initial
begin
	J1_SEL[3] = 1'b1;
end 
// J1_SEL[ 2 ]
initial
begin
	J1_SEL[2] = 1'b0;
end 
// J1_SEL[ 1 ]
initial
begin
	J1_SEL[1] = 1'b0;
end 
// J1_SEL[ 0 ]
initial
begin
	J1_SEL[0] = 1'b1;
end 

// J2_APERTOU
initial
begin
	J2_APERTOU = 1'b0;
	J2_APERTOU = #170000 1'b1;
	J2_APERTOU = #260000 1'b0;
	J2_APERTOU = #350000 1'b1;
	J2_APERTOU = #170000 1'b0;
end 
// J2_SEL[ 3 ]
initial
begin
	J2_SEL[3] = 1'b1;
	J2_SEL[3] = #380000 1'b0;
	J2_SEL[3] = #160000 1'b1;
end 
// J2_SEL[ 2 ]
initial
begin
	J2_SEL[2] = 1'b0;
end 
// J2_SEL[ 1 ]
initial
begin
	J2_SEL[1] = 1'b0;
end 
// J2_SEL[ 0 ]
initial
begin
	J2_SEL[0] = 1'b0;
	J2_SEL[0] = #380000 1'b1;
	J2_SEL[0] = #160000 1'b0;
end 
endmodule

